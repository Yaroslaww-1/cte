name: deploy

on:
  push:
    branches: 
      - develop

env:
  BACKEND_DATABASE_URL: ${{ secrets.BACKEND_DATABASE_URL }}
  BACKEND_HOST: ${{ secrets.BACKEND_HOST }}
  BACKEND_PORT: ${{ secrets.BACKEND_PORT }}
  BACKEND_JWT_SECRET: ${{ secrets.BACKEND_JWT_SECRET }}
  FRONTEND_APP_URL: ${{ secrets.FRONTEND_APP_URL }}
  BACKEND_MAILER_EMAIL_ADDRESS: ${{ secrets.BACKEND_MAILER_EMAIL_ADDRESS }}
  BACKEND_MAILER_EMAIL_PASSWORD: ${{ secrets.BACKEND_MAILER_EMAIL_PASSWORD }}

jobs:
  setup-node-modules:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      id: node-modules-cache
      with:
        path: 'node_modules'
        key: node_modules-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          node_modules-
    - name: install dependencies
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: yarn install

  run-migrations:
    needs: setup-node-modules
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: load node_modules
      uses: actions/cache@v2
      with:
        path: 'node_modules'
        key: node_modules-${{ hashFiles('yarn.lock') }}
    - name: run migrations
      run: BACKEND_DATABASE_URL=${{ secrets.BACKEND_DATABASE_URL }} cd backend && yarn db:migrate

  build-backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: whoan/docker-build-with-cache-action@v5
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        image_name: cte-backend
        registry: docker.pkg.github.com
        dockerfile: ./backend/Dockerfile
        image_tag: latest

  build-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: whoan/docker-build-with-cache-action@v5
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        image_name: cte-frontend
        registry: docker.pkg.github.com
        dockerfile: ./frontend/Dockerfile
        image_tag: latest
        build_extra_args: --build-arg VUE_APP_API_URL=${{ secrets.VUE_APP_API_URL }}

  deploy:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Copy docker-compose.prod.yml to digitalocean
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.DEPLOYMENT_HOST }}
        username: ${{ secrets.DEPLOYMENT_USERNAME }}
        key: ${{ secrets.DEPLOYMENT_KEY }}
        port: ${{ secrets.DEPLOYMENT_PORT }}
        passphrase: ${{ secrets.DEPLOYMENT_PASSPHRASE }}
        source: "docker-compose.prod.yml"
        target: "app"
    - name: Deploy package to digitalocean
      uses: appleboy/ssh-action@master
      env:
          GITHUB_USERNAME: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        host: ${{ secrets.DEPLOYMENT_HOST }}
        username: ${{ secrets.DEPLOYMENT_USERNAME }}
        key: ${{ secrets.DEPLOYMENT_KEY }}
        port: ${{ secrets.DEPLOYMENT_PORT }}
        passphrase: ${{ secrets.DEPLOYMENT_PASSPHRASE }}
        envs: GITHUB_USERNAME,GITHUB_TOKEN,BACKEND_DATABASE_URL,BACKEND_HOST,BACKEND_PORT,BACKEND_JWT_SECRET,BACKEND_MAILER_EMAIL_ADDRESS,BACKEND_MAILER_EMAIL_PASSWORD,BACKEND_FRONTEND_APP_URL,BACKEND_COOKIE_DOMAIN,VUE_APP_API_URL
        script: |
          export GITHUB_USERNAME=$GITHUB_USERNAME
          export GITHUB_TOKEN=$GITHUB_TOKEN
          echo "$GITHUB_TOKEN" | docker login docker.pkg.github.com -u $GITHUB_USERNAME -p $GITHUB_TOKEN
          export BACKEND_HOST=$BACKEND_HOST
          export BACKEND_PORT=$BACKEND_PORT
          export BACKEND_DATABASE_URL=$BACKEND_DATABASE_URL
          export BACKEND_JWT_SECRET=$BACKEND_JWT_SECRET
          export BACKEND_MAILER_EMAIL_ADDRESS=$BACKEND_MAILER_EMAIL_ADDRESS
          export BACKEND_MAILER_EMAIL_PASSWORD=$BACKEND_MAILER_EMAIL_PASSWORD
          export BACKEND_FRONTEND_APP_URL=$BACKEND_FRONTEND_APP_URL
          export BACKEND_COOKIE_DOMAIN=$BACKEND_COOKIE_DOMAIN
          export VUE_APP_API_URL=$VUE_APP_API_URL
          cd app
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d --build

  notify-success:
    needs: [deploy, run-migrations]
    if: success()
    runs-on: ubuntu-latest
    steps:
    - uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          Pog! Build is finished! Status is success

  notify-failure:
    needs: [deploy, run-migrations]
    if: failure()
    runs-on: ubuntu-latest
    steps:
    - uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          Pog! Build is finished! Status is failure

  notify-error-if-first-layer-fails:
    needs: [build-backend, build-frontend, setup-node-modules]
    if: failure()
    runs-on: ubuntu-latest
    steps:
    - uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          Pog! Build is finished! Status is failure
